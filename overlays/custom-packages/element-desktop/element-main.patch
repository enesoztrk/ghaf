diff --git a/src/electron-main.ts b/src/electron-main.ts
index d907312..8ed7061 100644
--- a/src/electron-main.ts
+++ b/src/electron-main.ts
@@ -466,11 +466,10 @@ app.on("ready", async () => {
         // https://www.electronjs.org/docs/faq#the-font-looks-blurry-what-is-this-and-what-can-i-do
         backgroundColor: "#fff",
 
-        titleBarStyle: process.platform === "darwin" ? "hidden" : "default",
         trafficLightPosition: { x: 9, y: 8 },
 
         icon: global.trayConfig.icon_path,
-        show: false,
+        show: true,
         autoHideMenuBar: store.get("autoHideMenuBar"),
 
         x: mainWindowState.x,
@@ -496,7 +495,6 @@ app.on("ready", async () => {
         app.exit(1);
     }
 
-    void global.mainWindow.loadURL("vector://vector/webapp/");
 
     if (process.platform === "darwin") {
         setupMacosTitleBar(global.mainWindow);
@@ -507,79 +505,31 @@ app.on("ready", async () => {
     global.mainWindow.webContents.session.setSpellCheckerEnabled(store.get("spellCheckerEnabled", true));
 
     // Create trayIcon icon
-    if (store.get("minimizeToTray")) tray.create(global.trayConfig);
+    //if (store.get("minimizeToTray")) tray.create(global.trayConfig);
 
-    global.mainWindow.once("ready-to-show", () => {
+    global.mainWindow.webContents.once('did-finish-load',function() {
         if (!global.mainWindow) return;
         mainWindowState.manage(global.mainWindow);
 
         if (!argv["hidden"]) {
             global.mainWindow.show();
+            global.mainWindow.restore();
+            global.mainWindow.focus();
         } else {
             // hide here explicitly because window manage above sometimes shows it
             global.mainWindow.hide();
         }
     });
 
-    global.mainWindow.webContents.on("before-input-event", (event: Event, input: Input): void => {
-        const shouldWarnBeforeExit = store.get("warnBeforeExit", true);
-        const exitShortcutPressed =
-            input.type === "keyDown" && exitShortcuts.some((shortcutFn) => shortcutFn(input, process.platform));
-
-        if (shouldWarnBeforeExit && exitShortcutPressed && global.mainWindow) {
-            const shouldCancelCloseRequest =
-                dialog.showMessageBoxSync(global.mainWindow, {
-                    type: "question",
-                    buttons: [
-                        _t("action|cancel"),
-                        _t("action|close_brand", {
-                            brand: global.vectorConfig.brand || "Element",
-                        }),
-                    ],
-                    message: _t("confirm_quit"),
-                    defaultId: 1,
-                    cancelId: 0,
-                }) === 0;
-
-            if (shouldCancelCloseRequest) {
-                event.preventDefault();
-            }
-        }
-    });
+    void global.mainWindow.loadURL("vector://vector/webapp/");
 
     global.mainWindow.on("closed", () => {
         global.mainWindow = null;
     });
     global.mainWindow.on("close", async (e) => {
-        // If we are not quitting and have a tray icon then minimize to tray
-        if (!global.appQuitting && (tray.hasTray() || process.platform === "darwin")) {
-            // On Mac, closing the window just hides it
-            // (this is generally how single-window Mac apps
-            // behave, eg. Mail.app)
-            e.preventDefault();
-
-            if (global.mainWindow?.isFullScreen()) {
-                global.mainWindow.once("leave-full-screen", () => global.mainWindow?.hide());
-
-                global.mainWindow.setFullScreen(false);
-            } else {
-                global.mainWindow?.hide();
-            }
-
-            return false;
-        }
+
     });
 
-    if (process.platform === "win32") {
-        // Handle forward/backward mouse buttons in Windows
-        global.mainWindow.on("app-command", (e, cmd) => {
-            if (cmd === "browser-backward" && global.mainWindow?.webContents.canGoBack()) {
-                global.mainWindow.webContents.goBack();
-            } else if (cmd === "browser-forward" && global.mainWindow?.webContents.canGoForward()) {
-                global.mainWindow.webContents.goForward();
-            }
-        });
-    }
 
     webContentsHandler(global.mainWindow.webContents);
 
